// <auto-generated/>
#nullable enable

namespace GraphQL.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseResult : global::System.IEquatable<CreateCourseResult>, ICreateCourseResult
    {
        public CreateCourseResult(global::GraphQL.Client.ICreateCourse_CreateCourse createCourse)
        {
            CreateCourse = createCourse;
        }

        public global::GraphQL.Client.ICreateCourse_CreateCourse CreateCourse { get; }

        public virtual global::System.Boolean Equals(CreateCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateCourse.Equals(other.CreateCourse));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourse_CreateCourse_CourseResult : global::System.IEquatable<CreateCourse_CreateCourse_CourseResult>, ICreateCourse_CreateCourse_CourseResult
    {
        public CreateCourse_CreateCourse_CourseResult(global::System.Guid id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateCourse_CreateCourse_CourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCourse_CreateCourse_CourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateCourseResult
    {
        public global::GraphQL.Client.ICreateCourse_CreateCourse CreateCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateCourse_CreateCourse
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateCourse_CreateCourse_CourseResult : ICreateCourse_CreateCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseResult : global::System.IEquatable<DeleteCourseResult>, IDeleteCourseResult
    {
        public DeleteCourseResult(global::System.Boolean deleteCourse)
        {
            DeleteCourse = deleteCourse;
        }

        public global::System.Boolean DeleteCourse { get; }

        public virtual global::System.Boolean Equals(DeleteCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteCourse == other.DeleteCourse);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteCourseResult
    {
        public global::System.Boolean DeleteCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseResult : global::System.IEquatable<UpdateCourseResult>, IUpdateCourseResult
    {
        public UpdateCourseResult(global::GraphQL.Client.IUpdateCourse_UpdateCourse updateCourse)
        {
            UpdateCourse = updateCourse;
        }

        public global::GraphQL.Client.IUpdateCourse_UpdateCourse UpdateCourse { get; }

        public virtual global::System.Boolean Equals(UpdateCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateCourse.Equals(other.UpdateCourse));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourse_UpdateCourse_CourseResult : global::System.IEquatable<UpdateCourse_UpdateCourse_CourseResult>, IUpdateCourse_UpdateCourse_CourseResult
    {
        public UpdateCourse_UpdateCourse_CourseResult(global::System.Guid id, global::System.String? name, global::GraphQL.Client.Subject subject)
        {
            Id = id;
            Name = name;
            Subject = subject;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public virtual global::System.Boolean Equals(UpdateCourse_UpdateCourse_CourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Subject.Equals(other.Subject);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourse_UpdateCourse_CourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Subject.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateCourseResult
    {
        public global::GraphQL.Client.IUpdateCourse_UpdateCourse UpdateCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateCourse_UpdateCourse
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateCourse_UpdateCourse_CourseResult : IUpdateCourse_UpdateCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdResult : global::System.IEquatable<GetCourseByIdResult>, IGetCourseByIdResult
    {
        public GetCourseByIdResult(global::GraphQL.Client.IGetCourseById_CourseById courseById)
        {
            CourseById = courseById;
        }

        public global::GraphQL.Client.IGetCourseById_CourseById CourseById { get; }

        public virtual global::System.Boolean Equals(GetCourseByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseById.Equals(other.CourseById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseById.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseById_CourseById_CourseType : global::System.IEquatable<GetCourseById_CourseById_CourseType>, IGetCourseById_CourseById_CourseType
    {
        public GetCourseById_CourseById_CourseType(global::System.Guid id, global::System.String name, global::GraphQL.Client.IGetCourseById_CourseById_Instructor instructor, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourseById_CourseById_Students>? students)
        {
            Id = id;
            Name = name;
            Instructor = instructor;
            Students = students;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.IGetCourseById_CourseById_Instructor Instructor { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourseById_CourseById_Students>? Students { get; }

        public virtual global::System.Boolean Equals(GetCourseById_CourseById_CourseType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Instructor.Equals(other.Instructor) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Students, other.Students);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseById_CourseById_CourseType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Instructor.GetHashCode();
                if (Students != null)
                {
                    foreach (var Students_elm in Students)
                    {
                        hash ^= 397 * Students_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseById_CourseById_Instructor_InstructorType : global::System.IEquatable<GetCourseById_CourseById_Instructor_InstructorType>, IGetCourseById_CourseById_Instructor_InstructorType
    {
        public GetCourseById_CourseById_Instructor_InstructorType(global::System.String? firstName)
        {
            FirstName = firstName;
        }

        public global::System.String? FirstName { get; }

        public virtual global::System.Boolean Equals(GetCourseById_CourseById_Instructor_InstructorType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseById_CourseById_Instructor_InstructorType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseById_CourseById_Students_StudentType : global::System.IEquatable<GetCourseById_CourseById_Students_StudentType>, IGetCourseById_CourseById_Students_StudentType
    {
        public GetCourseById_CourseById_Students_StudentType(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(GetCourseById_CourseById_Students_StudentType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseById_CourseById_Students_StudentType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseByIdResult
    {
        public global::GraphQL.Client.IGetCourseById_CourseById CourseById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.IGetCourseById_CourseById_Instructor Instructor { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourseById_CourseById_Students>? Students { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById_CourseType : IGetCourseById_CourseById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById_Instructor
    {
        public global::System.String? FirstName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById_Instructor_InstructorType : IGetCourseById_CourseById_Instructor
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById_Students
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseById_CourseById_Students_StudentType : IGetCourseById_CourseById_Students
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesResult : global::System.IEquatable<GetCoursesResult>, IGetCoursesResult
    {
        public GetCoursesResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourses_Courses> courses)
        {
            Courses = courses;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourses_Courses> Courses { get; }

        public virtual global::System.Boolean Equals(GetCoursesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Courses, other.Courses));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCoursesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Courses_elm in Courses)
                {
                    hash ^= 397 * Courses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourses_Courses_CourseType : global::System.IEquatable<GetCourses_Courses_CourseType>, IGetCourses_Courses_CourseType
    {
        public GetCourses_Courses_CourseType(global::System.Guid id, global::System.String name, global::GraphQL.Client.Subject subject)
        {
            Id = id;
            Name = name;
            Subject = subject;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public virtual global::System.Boolean Equals(GetCourses_Courses_CourseType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Subject.Equals(other.Subject);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourses_Courses_CourseType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Subject.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCoursesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourses_Courses> Courses { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourses_Courses
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourses_Courses_CourseType : IGetCourses_Courses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesResult : global::System.IEquatable<GetPaginatedCoursesResult>, IGetPaginatedCoursesResult
    {
        public GetPaginatedCoursesResult(global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses? paginatedCourses)
        {
            PaginatedCourses = paginatedCourses;
        }

        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses? PaginatedCourses { get; }

        public virtual global::System.Boolean Equals(GetPaginatedCoursesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PaginatedCourses is null && other.PaginatedCourses is null) || PaginatedCourses != null && PaginatedCourses.Equals(other.PaginatedCourses)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaginatedCoursesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PaginatedCourses != null)
                {
                    hash ^= 397 * PaginatedCourses.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection : global::System.IEquatable<GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection>, IGetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection
    {
        public GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes>? nodes, global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_PageInfo pageInfo, global::System.Int32 totalCount)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo) && TotalCount == other.TotalCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCourses_PaginatedCourses_Nodes_CourseType : global::System.IEquatable<GetPaginatedCourses_PaginatedCourses_Nodes_CourseType>, IGetPaginatedCourses_PaginatedCourses_Nodes_CourseType
    {
        public GetPaginatedCourses_PaginatedCourses_Nodes_CourseType(global::System.Guid id, global::System.String name, global::GraphQL.Client.Subject subject, global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor instructor)
        {
            Id = id;
            Name = name;
            Subject = subject;
            Instructor = instructor;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor Instructor { get; }

        public virtual global::System.Boolean Equals(GetPaginatedCourses_PaginatedCourses_Nodes_CourseType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Subject.Equals(other.Subject) && Instructor.Equals(other.Instructor);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaginatedCourses_PaginatedCourses_Nodes_CourseType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Subject.GetHashCode();
                hash ^= 397 * Instructor.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo : global::System.IEquatable<GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo>, IGetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo
    {
        public GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo(global::System.String? startCursor, global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor))) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType : global::System.IEquatable<GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType>, IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType
    {
        public GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType(global::System.Guid id, global::System.String? firstName, global::System.String? lastName, global::System.Double salary)
        {
            Id = id;
            FirstName = firstName;
            LastName = lastName;
            Salary = salary;
        }

        public global::System.Guid Id { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.Double Salary { get; }

        public virtual global::System.Boolean Equals(GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && Salary == other.Salary;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                hash ^= 397 * Salary.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCoursesResult
    {
        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses? PaginatedCourses { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection : IGetPaginatedCourses_PaginatedCourses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_Nodes
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor Instructor { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_Nodes_CourseType : IGetPaginatedCourses_PaginatedCourses_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_PageInfo
    {
        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo : IGetPaginatedCourses_PaginatedCourses_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor
    {
        public global::System.Guid Id { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.Double Salary { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType : IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedResult : global::System.IEquatable<CourseCreatedResult>, ICourseCreatedResult
    {
        public CourseCreatedResult(global::GraphQL.Client.ICourseCreated_CourseCreated courseCreated)
        {
            CourseCreated = courseCreated;
        }

        public global::GraphQL.Client.ICourseCreated_CourseCreated CourseCreated { get; }

        public virtual global::System.Boolean Equals(CourseCreatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseCreated.Equals(other.CourseCreated));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseCreatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseCreated.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreated_CourseCreated_CourseResult : global::System.IEquatable<CourseCreated_CourseCreated_CourseResult>, ICourseCreated_CourseCreated_CourseResult
    {
        public CourseCreated_CourseCreated_CourseResult(global::System.Guid id, global::System.String? name, global::GraphQL.Client.Subject subject)
        {
            Id = id;
            Name = name;
            Subject = subject;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public virtual global::System.Boolean Equals(CourseCreated_CourseCreated_CourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Subject.Equals(other.Subject);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseCreated_CourseCreated_CourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Subject.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseCreatedResult
    {
        public global::GraphQL.Client.ICourseCreated_CourseCreated CourseCreated { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseCreated_CourseCreated
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseCreated_CourseCreated_CourseResult : ICourseCreated_CourseCreated
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedResult : global::System.IEquatable<CourseUpdatedResult>, ICourseUpdatedResult
    {
        public CourseUpdatedResult(global::GraphQL.Client.ICourseUpdated_CourseUpdated courseUpdated)
        {
            CourseUpdated = courseUpdated;
        }

        public global::GraphQL.Client.ICourseUpdated_CourseUpdated CourseUpdated { get; }

        public virtual global::System.Boolean Equals(CourseUpdatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseUpdated.Equals(other.CourseUpdated));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseUpdatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseUpdated.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdated_CourseUpdated_CourseResult : global::System.IEquatable<CourseUpdated_CourseUpdated_CourseResult>, ICourseUpdated_CourseUpdated_CourseResult
    {
        public CourseUpdated_CourseUpdated_CourseResult(global::System.Guid id, global::System.String? name, global::GraphQL.Client.Subject subject)
        {
            Id = id;
            Name = name;
            Subject = subject;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }

        public virtual global::System.Boolean Equals(CourseUpdated_CourseUpdated_CourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Subject.Equals(other.Subject);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseUpdated_CourseUpdated_CourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Subject.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseUpdatedResult
    {
        public global::GraphQL.Client.ICourseUpdated_CourseUpdated CourseUpdated { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseUpdated_CourseUpdated
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseUpdated_CourseUpdated_CourseResult : ICourseUpdated_CourseUpdated
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchResult : global::System.IEquatable<SearchResult>, ISearchResult
    {
        public SearchResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.ISearch_Search> search)
        {
            Search = search;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.ISearch_Search> Search { get; }

        public virtual global::System.Boolean Equals(SearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Search, other.Search));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Search_elm in Search)
                {
                    hash ^= 397 * Search_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Search_Search_CourseType : global::System.IEquatable<Search_Search_CourseType>, ISearch_Search_CourseType
    {
        public Search_Search_CourseType(global::System.String __typename, global::System.Guid id, global::System.String name)
        {
            this.__typename = __typename;
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(Search_Search_CourseType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Id.Equals(other.Id) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Search_Search_CourseType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Search_Search_InstructorType : global::System.IEquatable<Search_Search_InstructorType>, ISearch_Search_InstructorType
    {
        public Search_Search_InstructorType(global::System.String __typename, global::System.Guid id, global::System.String? firstName, global::System.String? lastName, global::System.Double salary)
        {
            this.__typename = __typename;
            Id = id;
            FirstName = firstName;
            LastName = lastName;
            Salary = salary;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.Guid Id { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.Double Salary { get; }

        public virtual global::System.Boolean Equals(Search_Search_InstructorType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Id.Equals(other.Id) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && Salary == other.Salary;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Search_Search_InstructorType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                hash ^= 397 * Salary.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class Search_Search_StudentType : global::System.IEquatable<Search_Search_StudentType>, ISearch_Search_StudentType
    {
        public Search_Search_StudentType(global::System.String __typename)
        {
            this.__typename = __typename;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(Search_Search_StudentType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Search_Search_StudentType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearchResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.ISearch_Search> Search { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearch_Search
    {
        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearch_Search_CourseType : ISearch_Search
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearch_Search_InstructorType : ISearch_Search
    {
        public global::System.Guid Id { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.Double Salary { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearch_Search_StudentType : ISearch_Search
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _subjectFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "CourseTypeInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _subjectFormatter = serializerResolver.GetInputValueFormatter("Subject");
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.CourseTypeInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.ICourseTypeInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsSubjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("subject", FormatSubject(input.Subject)));
            }

            if (inputInfo.IsInstructorIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("instructorId", FormatInstructorId(input.InstructorId)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSubject(global::GraphQL.Client.Subject input)
        {
            return _subjectFormatter.Format(input);
        }

        private global::System.Object? FormatInstructorId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeInput : global::GraphQL.Client.State.ICourseTypeInputInfo, global::System.IEquatable<CourseTypeInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseTypeInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseTypeInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && Subject.Equals(other.Subject) && InstructorId.Equals(other.InstructorId);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Subject.GetHashCode();
                hash ^= 397 * InstructorId.GetHashCode();
                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::GraphQL.Client.Subject _value_subject;
        private global::System.Boolean _set_subject;
        private global::System.Guid _value_instructorId;
        private global::System.Boolean _set_instructorId;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeInputInfo.IsNameSet => _set_name;
        public global::GraphQL.Client.Subject Subject
        {
            get => _value_subject;
            set
            {
                _set_subject = true;
                _value_subject = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeInputInfo.IsSubjectSet => _set_subject;
        public global::System.Guid InstructorId
        {
            get => _value_instructorId;
            set
            {
                _set_instructorId = true;
                _value_instructorId = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeInputInfo.IsInstructorIdSet => _set_instructorId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _courseTypeFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableGuidOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _subjectOperationFilterInputFormatter = default !;
        public global::System.String TypeName => "CourseTypeFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _courseTypeFilterInputFormatter = serializerResolver.GetInputValueFormatter("CourseTypeFilterInput");
            _comparableGuidOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableGuidOperationFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _subjectOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("SubjectOperationFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.CourseTypeFilterInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.ICourseTypeFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsSubjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("subject", FormatSubject(input.Subject)));
            }

            if (inputInfo.IsInstructorIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("instructorId", FormatInstructorId(input.InstructorId)));
            }

            if (inputInfo.IsCreatorIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creatorId", FormatCreatorId(input.CreatorId)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_courseTypeFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_courseTypeFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::GraphQL.Client.ComparableGuidOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableGuidOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::GraphQL.Client.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSubject(global::GraphQL.Client.SubjectOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _subjectOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatInstructorId(global::GraphQL.Client.ComparableGuidOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableGuidOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreatorId(global::GraphQL.Client.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeFilterInput : global::GraphQL.Client.State.ICourseTypeFilterInputInfo, global::System.IEquatable<CourseTypeFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseTypeFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseTypeFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Subject is null && other.Subject is null) || Subject != null && Subject.Equals(other.Subject)) && ((InstructorId is null && other.InstructorId is null) || InstructorId != null && InstructorId.Equals(other.InstructorId)) && ((CreatorId is null && other.CreatorId is null) || CreatorId != null && CreatorId.Equals(other.CreatorId));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Subject != null)
                {
                    hash ^= 397 * Subject.GetHashCode();
                }

                if (InstructorId != null)
                {
                    hash ^= 397 * InstructorId.GetHashCode();
                }

                if (CreatorId != null)
                {
                    hash ^= 397 * CreatorId.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::GraphQL.Client.ComparableGuidOperationFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::GraphQL.Client.StringOperationFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::GraphQL.Client.SubjectOperationFilterInput? _value_subject;
        private global::System.Boolean _set_subject;
        private global::GraphQL.Client.ComparableGuidOperationFilterInput? _value_instructorId;
        private global::System.Boolean _set_instructorId;
        private global::GraphQL.Client.StringOperationFilterInput? _value_creatorId;
        private global::System.Boolean _set_creatorId;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsOrSet => _set_or;
        public global::GraphQL.Client.ComparableGuidOperationFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsIdSet => _set_id;
        public global::GraphQL.Client.StringOperationFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsNameSet => _set_name;
        public global::GraphQL.Client.SubjectOperationFilterInput? Subject
        {
            get => _value_subject;
            set
            {
                _set_subject = true;
                _value_subject = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsSubjectSet => _set_subject;
        public global::GraphQL.Client.ComparableGuidOperationFilterInput? InstructorId
        {
            get => _value_instructorId;
            set
            {
                _set_instructorId = true;
                _value_instructorId = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsInstructorIdSet => _set_instructorId;
        public global::GraphQL.Client.StringOperationFilterInput? CreatorId
        {
            get => _value_creatorId;
            set
            {
                _set_creatorId = true;
                _value_creatorId = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeFilterInputInfo.IsCreatorIdSet => _set_creatorId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class ComparableGuidOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "ComparableGuidOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.ComparableGuidOperationFilterInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_uUIDFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_uUIDFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.Guid? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _uUIDFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class ComparableGuidOperationFilterInput : global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo, global::System.IEquatable<ComparableGuidOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableGuidOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableGuidOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((Gt is null && other.Gt is null) || Gt != null && Gt.Equals(other.Gt)) && ((Ngt is null && other.Ngt is null) || Ngt != null && Ngt.Equals(other.Ngt)) && ((Gte is null && other.Gte is null) || Gte != null && Gte.Equals(other.Gte)) && ((Ngte is null && other.Ngte is null) || Ngte != null && Ngte.Equals(other.Ngte)) && ((Lt is null && other.Lt is null) || Lt != null && Lt.Equals(other.Lt)) && ((Nlt is null && other.Nlt is null) || Nlt != null && Nlt.Equals(other.Nlt)) && ((Lte is null && other.Lte is null) || Lte != null && Lte.Equals(other.Lte)) && ((Nlte is null && other.Nlte is null) || Nlte != null && Nlte.Equals(other.Nlte));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Guid? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Guid? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.Guid? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Guid? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.Guid? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.Guid? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.Guid? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.Guid? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.Guid? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.Guid? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.Guid? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.Guid? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Guid>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.Guid? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsGtSet => _set_gt;
        public global::System.Guid? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNgtSet => _set_ngt;
        public global::System.Guid? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsGteSet => _set_gte;
        public global::System.Guid? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNgteSet => _set_ngte;
        public global::System.Guid? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsLtSet => _set_lt;
        public global::System.Guid? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNltSet => _set_nlt;
        public global::System.Guid? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsLteSet => _set_lte;
        public global::System.Guid? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IComparableGuidOperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class StringOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.StringOperationFilterInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.IStringOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNcontainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ncontains", FormatNcontains(input.Ncontains)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsStartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startsWith", FormatStartsWith(input.StartsWith)));
            }

            if (inputInfo.IsNstartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nstartsWith", FormatNstartsWith(input.NstartsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsNendsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nendsWith", FormatNendsWith(input.NendsWith)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNcontains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatStartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNstartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNendsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class StringOperationFilterInput : global::GraphQL.Client.State.IStringOperationFilterInputInfo, global::System.IEquatable<StringOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq)) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((Ncontains is null && other.Ncontains is null) || Ncontains != null && Ncontains.Equals(other.Ncontains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((StartsWith is null && other.StartsWith is null) || StartsWith != null && StartsWith.Equals(other.StartsWith)) && ((NstartsWith is null && other.NstartsWith is null) || NstartsWith != null && NstartsWith.Equals(other.NstartsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((NendsWith is null && other.NendsWith is null) || NendsWith != null && NendsWith.Equals(other.NendsWith));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (Ncontains != null)
                {
                    hash ^= 397 * Ncontains.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (StartsWith != null)
                {
                    hash ^= 397 * StartsWith.GetHashCode();
                }

                if (NstartsWith != null)
                {
                    hash ^= 397 * NstartsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (NendsWith != null)
                {
                    hash ^= 397 * NendsWith.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_ncontains;
        private global::System.Boolean _set_ncontains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.String? _value_startsWith;
        private global::System.Boolean _set_startsWith;
        private global::System.String? _value_nstartsWith;
        private global::System.Boolean _set_nstartsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_nendsWith;
        private global::System.Boolean _set_nendsWith;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.StringOperationFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsOrSet => _set_or;
        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.String? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsContainsSet => _set_contains;
        public global::System.String? Ncontains
        {
            get => _value_ncontains;
            set
            {
                _set_ncontains = true;
                _value_ncontains = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsNcontainsSet => _set_ncontains;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.String? StartsWith
        {
            get => _value_startsWith;
            set
            {
                _set_startsWith = true;
                _value_startsWith = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsStartsWithSet => _set_startsWith;
        public global::System.String? NstartsWith
        {
            get => _value_nstartsWith;
            set
            {
                _set_nstartsWith = true;
                _value_nstartsWith = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsNstartsWithSet => _set_nstartsWith;
        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsEndsWithSet => _set_endsWith;
        public global::System.String? NendsWith
        {
            get => _value_nendsWith;
            set
            {
                _set_nendsWith = true;
                _value_nendsWith = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.IStringOperationFilterInputInfo.IsNendsWithSet => _set_nendsWith;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubjectOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _subjectFormatter = default !;
        public global::System.String TypeName => "SubjectOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _subjectFormatter = serializerResolver.GetInputValueFormatter("Subject");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.SubjectOperationFilterInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.ISubjectOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::GraphQL.Client.Subject? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _subjectFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::GraphQL.Client.Subject? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _subjectFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_subjectFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_subjectFormatter.Format(input_elm));
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubjectOperationFilterInput : global::GraphQL.Client.State.ISubjectOperationFilterInputInfo, global::System.IEquatable<SubjectOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubjectOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(SubjectOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }

        private global::GraphQL.Client.Subject? _value_eq;
        private global::System.Boolean _set_eq;
        private global::GraphQL.Client.Subject? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? _value_nin;
        private global::System.Boolean _set_nin;
        public global::GraphQL.Client.Subject? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ISubjectOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::GraphQL.Client.Subject? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ISubjectOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ISubjectOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.Subject>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ISubjectOperationFilterInputInfo.IsNinSet => _set_nin;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "CourseTypeSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQL.Client.CourseTypeSortInput;
            var inputInfo = runtimeValue as global::GraphQL.Client.State.ICourseTypeSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsSubjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("subject", FormatSubject(input.Subject)));
            }

            if (inputInfo.IsCreatorIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creatorId", FormatCreatorId(input.CreatorId)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::GraphQL.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSubject(global::GraphQL.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreatorId(global::GraphQL.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeSortInput : global::GraphQL.Client.State.ICourseTypeSortInputInfo, global::System.IEquatable<CourseTypeSortInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseTypeSortInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseTypeSortInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Subject is null && other.Subject is null) || Subject != null && Subject.Equals(other.Subject)) && ((CreatorId is null && other.CreatorId is null) || CreatorId != null && CreatorId.Equals(other.CreatorId));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Subject != null)
                {
                    hash ^= 397 * Subject.GetHashCode();
                }

                if (CreatorId != null)
                {
                    hash ^= 397 * CreatorId.GetHashCode();
                }

                return hash;
            }
        }

        private global::GraphQL.Client.SortEnumType? _value_name;
        private global::System.Boolean _set_name;
        private global::GraphQL.Client.SortEnumType? _value_subject;
        private global::System.Boolean _set_subject;
        private global::GraphQL.Client.SortEnumType? _value_creatorId;
        private global::System.Boolean _set_creatorId;
        public global::GraphQL.Client.SortEnumType? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeSortInputInfo.IsNameSet => _set_name;
        public global::GraphQL.Client.SortEnumType? Subject
        {
            get => _value_subject;
            set
            {
                _set_subject = true;
                _value_subject = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeSortInputInfo.IsSubjectSet => _set_subject;
        public global::GraphQL.Client.SortEnumType? CreatorId
        {
            get => _value_creatorId;
            set
            {
                _set_creatorId = true;
                _value_creatorId = value;
            }
        }

        global::System.Boolean global::GraphQL.Client.State.ICourseTypeSortInputInfo.IsCreatorIdSet => _set_creatorId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum Subject
    {
        Mathematics,
        Science,
        History
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubjectSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Subject>
    {
        public global::System.String TypeName => "Subject";
        public Subject Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "MATHEMATICS" => Subject.Mathematics,
                "SCIENCE" => Subject.Science,
                "HISTORY" => Subject.History,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                Subject.Mathematics => "MATHEMATICS",
                Subject.Science => "SCIENCE",
                Subject.History => "HISTORY",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum SortEnumType
    {
        Asc,
        Desc
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SortEnumTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SortEnumType>
    {
        public global::System.String TypeName => "SortEnumType";
        public SortEnumType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ASC" => SortEnumType.Asc,
                "DESC" => SortEnumType.Desc,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                SortEnumType.Asc => "ASC",
                SortEnumType.Desc => "DESC",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseTypeInput!) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateCourseMutationDocument()
        {
        }

        public static CreateCourseMutationDocument Instance { get; } = new CreateCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cfaa269ac907d01c17e6ed21222e3552");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseTypeInput!) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseMutation : global::GraphQL.Client.ICreateCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseTypeInputFormatter;
        public CreateCourseMutation(global::StrawberryShake.IOperationExecutor<ICreateCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _courseTypeInputFormatter = serializerResolver.GetInputValueFormatter("CourseTypeInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCourseResult>> ExecuteAsync(global::GraphQL.Client.CourseTypeInput courseInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(courseInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCourseResult>> Watch(global::GraphQL.Client.CourseTypeInput courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::GraphQL.Client.CourseTypeInput courseInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseInput", FormatCourseInput(courseInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateCourseMutationDocument.Instance.Hash.Value, name: "CreateCourse", document: CreateCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseInput(global::GraphQL.Client.CourseTypeInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _courseTypeInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseTypeInput!) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCourseResult>> ExecuteAsync(global::GraphQL.Client.CourseTypeInput courseInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCourseResult>> Watch(global::GraphQL.Client.CourseTypeInput courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteCourseMutationDocument()
        {
        }

        public static DeleteCourseMutationDocument Instance { get; } = new DeleteCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cba0f52afdcb6c6b64d7322d16f9d29c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseMutation : global::GraphQL.Client.IDeleteCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public DeleteCourseMutation(global::StrawberryShake.IOperationExecutor<IDeleteCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteCourseMutationDocument.Instance.Hash.Value, name: "DeleteCourse", document: DeleteCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($id: UUID!, $courseInput: CourseTypeInput!) {
    ///   updateCourse(id: $id, courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateCourseMutationDocument()
        {
        }

        public static UpdateCourseMutationDocument Instance { get; } = new UpdateCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "36c0fec2222eeb49c8f22babccdbea55");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($id: UUID!, $courseInput: CourseTypeInput!) {
    ///   updateCourse(id: $id, courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseMutation : global::GraphQL.Client.IUpdateCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseTypeInputFormatter;
        public UpdateCourseMutation(global::StrawberryShake.IOperationExecutor<IUpdateCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _courseTypeInputFormatter = serializerResolver.GetInputValueFormatter("CourseTypeInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> ExecuteAsync(global::System.Guid id, global::GraphQL.Client.CourseTypeInput courseInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, courseInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> Watch(global::System.Guid id, global::GraphQL.Client.CourseTypeInput courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, courseInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id, global::GraphQL.Client.CourseTypeInput courseInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("courseInput", FormatCourseInput(courseInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateCourseMutationDocument.Instance.Hash.Value, name: "UpdateCourse", document: UpdateCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        private global::System.Object? FormatCourseInput(global::GraphQL.Client.CourseTypeInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _courseTypeInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($id: UUID!, $courseInput: CourseTypeInput!) {
    ///   updateCourse(id: $id, courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> ExecuteAsync(global::System.Guid id, global::GraphQL.Client.CourseTypeInput courseInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> Watch(global::System.Guid id, global::GraphQL.Client.CourseTypeInput courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($id: UUID!) {
    ///   courseById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     instructor {
    ///       __typename
    ///       firstName
    ///     }
    ///     students {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCourseByIdQueryDocument()
        {
        }

        public static GetCourseByIdQueryDocument Instance { get; } = new GetCourseByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c8587b1cdf15cb664a2049c6e78ba75c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($id: UUID!) {
    ///   courseById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     instructor {
    ///       __typename
    ///       firstName
    ///     }
    ///     students {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdQuery : global::GraphQL.Client.IGetCourseByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCourseByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public GetCourseByIdQuery(global::StrawberryShake.IOperationExecutor<IGetCourseByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCourseByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCourseByIdQueryDocument.Instance.Hash.Value, name: "GetCourseById", document: GetCourseByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($id: UUID!) {
    ///   courseById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     instructor {
    ///       __typename
    ///       firstName
    ///     }
    ///     students {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCourseByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCoursesQueryDocument()
        {
        }

        public static GetCoursesQueryDocument Instance { get; } = new GetCoursesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4b26b1cd8397d77110e62208d3c18456");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesQuery : global::GraphQL.Client.IGetCoursesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCoursesResult> _operationExecutor;
        public GetCoursesQuery(global::StrawberryShake.IOperationExecutor<IGetCoursesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCoursesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCoursesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCoursesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCoursesQueryDocument.Instance.Hash.Value, name: "GetCourses", document: GetCoursesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCoursesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCoursesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCoursesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPaginatedCourses GraphQL operation
    /// <code>
    /// query GetPaginatedCourses($first: Int, $after: String, $last: Int, $before: String, $where: CourseTypeFilterInput, $order: [CourseTypeSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order, where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       subject
    ///       instructor {
    ///         __typename
    ///         id
    ///         firstName
    ///         lastName
    ///         salary
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPaginatedCoursesQueryDocument()
        {
        }

        public static GetPaginatedCoursesQueryDocument Instance { get; } = new GetPaginatedCoursesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x28, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x77, 0x68, 0x65, 0x72, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9c59d21ef97090e39b73c1a238d28e73");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPaginatedCourses GraphQL operation
    /// <code>
    /// query GetPaginatedCourses($first: Int, $after: String, $last: Int, $before: String, $where: CourseTypeFilterInput, $order: [CourseTypeSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order, where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       subject
    ///       instructor {
    ///         __typename
    ///         id
    ///         firstName
    ///         lastName
    ///         salary
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesQuery : global::GraphQL.Client.IGetPaginatedCoursesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPaginatedCoursesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseTypeFilterInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseTypeSortInputFormatter;
        public GetPaginatedCoursesQuery(global::StrawberryShake.IOperationExecutor<IGetPaginatedCoursesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _courseTypeFilterInputFormatter = serializerResolver.GetInputValueFormatter("CourseTypeFilterInput");
            _courseTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("CourseTypeSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPaginatedCoursesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaginatedCoursesResult>> ExecuteAsync(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::GraphQL.Client.CourseTypeFilterInput? @where, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(first, after, last, before, @where, order);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaginatedCoursesResult>> Watch(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::GraphQL.Client.CourseTypeFilterInput? @where, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(first, after, last, before, @where, order);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::GraphQL.Client.CourseTypeFilterInput? @where, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("first", FormatFirst(first));
            variables.Add("after", FormatAfter(after));
            variables.Add("last", FormatLast(last));
            variables.Add("before", FormatBefore(before));
            variables.Add("where", FormatWhere(@where));
            variables.Add("order", FormatOrder(order));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPaginatedCoursesQueryDocument.Instance.Hash.Value, name: "GetPaginatedCourses", document: GetPaginatedCoursesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFirst(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAfter(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLast(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBefore(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatWhere(global::GraphQL.Client.CourseTypeFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _courseTypeFilterInputFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_courseTypeSortInputFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPaginatedCourses GraphQL operation
    /// <code>
    /// query GetPaginatedCourses($first: Int, $after: String, $last: Int, $before: String, $where: CourseTypeFilterInput, $order: [CourseTypeSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order, where: $where) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       subject
    ///       instructor {
    ///         __typename
    ///         id
    ///         firstName
    ///         lastName
    ///         salary
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPaginatedCoursesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaginatedCoursesResult>> ExecuteAsync(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::GraphQL.Client.CourseTypeFilterInput? @where, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaginatedCoursesResult>> Watch(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::GraphQL.Client.CourseTypeFilterInput? @where, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.CourseTypeSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private CourseCreatedSubscriptionDocument()
        {
        }

        public static CourseCreatedSubscriptionDocument Instance { get; } = new CourseCreatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6e7d4225aadb59ee06d98bde4df381c7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedSubscription : global::GraphQL.Client.ICourseCreatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICourseCreatedResult> _operationExecutor;
        public CourseCreatedSubscription(global::StrawberryShake.IOperationExecutor<ICourseCreatedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICourseCreatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CourseCreatedSubscriptionDocument.Instance.Hash.Value, name: "CourseCreated", document: CourseCreatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseCreatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private CourseUpdatedSubscriptionDocument()
        {
        }

        public static CourseUpdatedSubscriptionDocument Instance { get; } = new CourseUpdatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c2ae75b497c3c212604c8238838b6510");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedSubscription : global::GraphQL.Client.ICourseUpdatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICourseUpdatedResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public CourseUpdatedSubscription(global::StrawberryShake.IOperationExecutor<ICourseUpdatedResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICourseUpdatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseUpdatedResult>> Watch(global::System.Guid courseId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid courseId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseId", FormatCourseId(courseId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CourseUpdatedSubscriptionDocument.Instance.Hash.Value, name: "CourseUpdated", document: CourseUpdatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     name
    ///     subject
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICourseUpdatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseUpdatedResult>> Watch(global::System.Guid courseId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the Search GraphQL operation
    /// <code>
    /// query Search($term: String!) {
    ///   search(term: $term) {
    ///     __typename
    ///     ... on InstructorType {
    ///       id
    ///       firstName
    ///       lastName
    ///       salary
    ///     }
    ///     ... on CourseType {
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchQueryDocument : global::StrawberryShake.IDocument
    {
        private SearchQueryDocument()
        {
        }

        public static SearchQueryDocument Instance { get; } = new SearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c20733322837e0bdb2c767cfe911f466");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Search GraphQL operation
    /// <code>
    /// query Search($term: String!) {
    ///   search(term: $term) {
    ///     __typename
    ///     ... on InstructorType {
    ///       id
    ///       firstName
    ///       lastName
    ///       salary
    ///     }
    ///     ... on CourseType {
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchQuery : global::GraphQL.Client.ISearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public SearchQuery(global::StrawberryShake.IOperationExecutor<ISearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISearchResult>> ExecuteAsync(global::System.String term, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(term);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISearchResult>> Watch(global::System.String term, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(term);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String term)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("term", FormatTerm(term));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SearchQueryDocument.Instance.Hash.Value, name: "Search", document: SearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Search GraphQL operation
    /// <code>
    /// query Search($term: String!) {
    ///   search(term: $term) {
    ///     __typename
    ///     ... on InstructorType {
    ///       id
    ///       firstName
    ///       lastName
    ///       salary
    ///     }
    ///     ... on CourseType {
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISearchResult>> ExecuteAsync(global::System.String term, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISearchResult>> Watch(global::System.String term, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GraphQLClient : global::GraphQL.Client.IGraphQLClient
    {
        private readonly global::GraphQL.Client.ICreateCourseMutation _createCourse;
        private readonly global::GraphQL.Client.IDeleteCourseMutation _deleteCourse;
        private readonly global::GraphQL.Client.IUpdateCourseMutation _updateCourse;
        private readonly global::GraphQL.Client.IGetCourseByIdQuery _getCourseById;
        private readonly global::GraphQL.Client.IGetCoursesQuery _getCourses;
        private readonly global::GraphQL.Client.IGetPaginatedCoursesQuery _getPaginatedCourses;
        private readonly global::GraphQL.Client.ICourseCreatedSubscription _courseCreated;
        private readonly global::GraphQL.Client.ICourseUpdatedSubscription _courseUpdated;
        private readonly global::GraphQL.Client.ISearchQuery _search;
        public GraphQLClient(global::GraphQL.Client.ICreateCourseMutation createCourse, global::GraphQL.Client.IDeleteCourseMutation deleteCourse, global::GraphQL.Client.IUpdateCourseMutation updateCourse, global::GraphQL.Client.IGetCourseByIdQuery getCourseById, global::GraphQL.Client.IGetCoursesQuery getCourses, global::GraphQL.Client.IGetPaginatedCoursesQuery getPaginatedCourses, global::GraphQL.Client.ICourseCreatedSubscription courseCreated, global::GraphQL.Client.ICourseUpdatedSubscription courseUpdated, global::GraphQL.Client.ISearchQuery search)
        {
            _createCourse = createCourse ?? throw new global::System.ArgumentNullException(nameof(createCourse));
            _deleteCourse = deleteCourse ?? throw new global::System.ArgumentNullException(nameof(deleteCourse));
            _updateCourse = updateCourse ?? throw new global::System.ArgumentNullException(nameof(updateCourse));
            _getCourseById = getCourseById ?? throw new global::System.ArgumentNullException(nameof(getCourseById));
            _getCourses = getCourses ?? throw new global::System.ArgumentNullException(nameof(getCourses));
            _getPaginatedCourses = getPaginatedCourses ?? throw new global::System.ArgumentNullException(nameof(getPaginatedCourses));
            _courseCreated = courseCreated ?? throw new global::System.ArgumentNullException(nameof(courseCreated));
            _courseUpdated = courseUpdated ?? throw new global::System.ArgumentNullException(nameof(courseUpdated));
            _search = search ?? throw new global::System.ArgumentNullException(nameof(search));
        }

        public static global::System.String ClientName => "GraphQLClient";
        public global::GraphQL.Client.ICreateCourseMutation CreateCourse => _createCourse;
        public global::GraphQL.Client.IDeleteCourseMutation DeleteCourse => _deleteCourse;
        public global::GraphQL.Client.IUpdateCourseMutation UpdateCourse => _updateCourse;
        public global::GraphQL.Client.IGetCourseByIdQuery GetCourseById => _getCourseById;
        public global::GraphQL.Client.IGetCoursesQuery GetCourses => _getCourses;
        public global::GraphQL.Client.IGetPaginatedCoursesQuery GetPaginatedCourses => _getPaginatedCourses;
        public global::GraphQL.Client.ICourseCreatedSubscription CourseCreated => _courseCreated;
        public global::GraphQL.Client.ICourseUpdatedSubscription CourseUpdated => _courseUpdated;
        public global::GraphQL.Client.ISearchQuery Search => _search;
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGraphQLClient
    {
        global::GraphQL.Client.ICreateCourseMutation CreateCourse { get; }

        global::GraphQL.Client.IDeleteCourseMutation DeleteCourse { get; }

        global::GraphQL.Client.IUpdateCourseMutation UpdateCourse { get; }

        global::GraphQL.Client.IGetCourseByIdQuery GetCourseById { get; }

        global::GraphQL.Client.IGetCoursesQuery GetCourses { get; }

        global::GraphQL.Client.IGetPaginatedCoursesQuery GetPaginatedCourses { get; }

        global::GraphQL.Client.ICourseCreatedSubscription CourseCreated { get; }

        global::GraphQL.Client.ICourseUpdatedSubscription CourseUpdated { get; }

        global::GraphQL.Client.ISearchQuery Search { get; }
    }
}

namespace GraphQL.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.CreateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateCourseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.ICreateCourseResult);
        public CreateCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateCourseResultInfo info)
            {
                return new CreateCourseResult(MapNonNullableICreateCourse_CreateCourse(info.CreateCourse, snapshot));
            }

            throw new global::System.ArgumentException("CreateCourseResultInfo expected.");
        }

        private global::GraphQL.Client.ICreateCourse_CreateCourse MapNonNullableICreateCourse_CreateCourse(global::GraphQL.Client.State.CourseResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateCourse_CreateCourse returnValue = default !;
            if (data.__typename.Equals("CourseResult", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateCourse_CreateCourse_CourseResult(data.Id ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateCourseResultInfo(global::GraphQL.Client.State.CourseResultData createCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateCourse = createCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.CourseResultData CreateCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateCourseResultInfo(CreateCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.DeleteCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteCourseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.IDeleteCourseResult);
        public DeleteCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteCourseResultInfo info)
            {
                return new DeleteCourseResult(info.DeleteCourse);
            }

            throw new global::System.ArgumentException("DeleteCourseResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteCourseResultInfo(global::System.Boolean deleteCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteCourse = deleteCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteCourseResultInfo(DeleteCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.UpdateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateCourseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.IUpdateCourseResult);
        public UpdateCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateCourseResultInfo info)
            {
                return new UpdateCourseResult(MapNonNullableIUpdateCourse_UpdateCourse(info.UpdateCourse, snapshot));
            }

            throw new global::System.ArgumentException("UpdateCourseResultInfo expected.");
        }

        private global::GraphQL.Client.IUpdateCourse_UpdateCourse MapNonNullableIUpdateCourse_UpdateCourse(global::GraphQL.Client.State.CourseResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateCourse_UpdateCourse returnValue = default !;
            if (data.__typename.Equals("CourseResult", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateCourse_UpdateCourse_CourseResult(data.Id ?? throw new global::System.ArgumentNullException(), data.Name, data.Subject ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateCourseResultInfo(global::GraphQL.Client.State.CourseResultData updateCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateCourse = updateCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.CourseResultData UpdateCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateCourseResultInfo(UpdateCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.GetCourseByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCourseByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.IGetCourseByIdResult);
        public GetCourseByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCourseByIdResultInfo info)
            {
                return new GetCourseByIdResult(MapNonNullableIGetCourseById_CourseById(info.CourseById, snapshot));
            }

            throw new global::System.ArgumentException("GetCourseByIdResultInfo expected.");
        }

        private global::GraphQL.Client.IGetCourseById_CourseById MapNonNullableIGetCourseById_CourseById(global::GraphQL.Client.State.CourseTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCourseById_CourseById returnValue = default !;
            if (data.__typename.Equals("CourseType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCourseById_CourseById_CourseType(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetCourseById_CourseById_Instructor(data.Instructor ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetCourseById_CourseById_StudentsNonNullableArray(data.Students, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQL.Client.IGetCourseById_CourseById_Instructor MapNonNullableIGetCourseById_CourseById_Instructor(global::GraphQL.Client.State.InstructorTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCourseById_CourseById_Instructor returnValue = default !;
            if (data.__typename.Equals("InstructorType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCourseById_CourseById_Instructor_InstructorType(data.FirstName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourseById_CourseById_Students>? MapIGetCourseById_CourseById_StudentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.StudentTypeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var studentTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.IGetCourseById_CourseById_Students>();
            foreach (global::GraphQL.Client.State.StudentTypeData child in list)
            {
                studentTypes.Add(MapNonNullableIGetCourseById_CourseById_Students(child, snapshot));
            }

            return studentTypes;
        }

        private global::GraphQL.Client.IGetCourseById_CourseById_Students MapNonNullableIGetCourseById_CourseById_Students(global::GraphQL.Client.State.StudentTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCourseById_CourseById_Students returnValue = default !;
            if (data.__typename.Equals("StudentType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCourseById_CourseById_Students_StudentType(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCourseByIdResultInfo(global::GraphQL.Client.State.CourseTypeData courseById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseById = courseById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.CourseTypeData CourseById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCourseByIdResultInfo(CourseById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.GetCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCoursesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.IGetCoursesResult);
        public GetCoursesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCoursesResultInfo info)
            {
                return new GetCoursesResult(MapNonNullableIGetCourses_CoursesNonNullableArray(info.Courses, snapshot));
            }

            throw new global::System.ArgumentException("GetCoursesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetCourses_Courses> MapNonNullableIGetCourses_CoursesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var courseTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.IGetCourses_Courses>();
            foreach (global::GraphQL.Client.State.CourseTypeData child in list)
            {
                courseTypes.Add(MapNonNullableIGetCourses_Courses(child, snapshot));
            }

            return courseTypes;
        }

        private global::GraphQL.Client.IGetCourses_Courses MapNonNullableIGetCourses_Courses(global::GraphQL.Client.State.CourseTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCourses_Courses returnValue = default !;
            if (data.__typename.Equals("CourseType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCourses_Courses_CourseType(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Subject ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCoursesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData> courses, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Courses = courses;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData> Courses { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCoursesResultInfo(Courses, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.GetPaginatedCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPaginatedCoursesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.IGetPaginatedCoursesResult);
        public GetPaginatedCoursesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPaginatedCoursesResultInfo info)
            {
                return new GetPaginatedCoursesResult(MapIGetPaginatedCourses_PaginatedCourses(info.PaginatedCourses, snapshot));
            }

            throw new global::System.ArgumentException("GetPaginatedCoursesResultInfo expected.");
        }

        private global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses? MapIGetPaginatedCourses_PaginatedCourses(global::GraphQL.Client.State.PaginatedCoursesConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPaginatedCourses_PaginatedCourses returnValue = default !;
            if (data?.__typename.Equals("PaginatedCoursesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPaginatedCourses_PaginatedCourses_PaginatedCoursesConnection(MapIGetPaginatedCourses_PaginatedCourses_NodesNonNullableArray(data.Nodes, snapshot), MapNonNullableIGetPaginatedCourses_PaginatedCourses_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes>? MapIGetPaginatedCourses_PaginatedCourses_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var courseTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes>();
            foreach (global::GraphQL.Client.State.CourseTypeData child in list)
            {
                courseTypes.Add(MapNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes(child, snapshot));
            }

            return courseTypes;
        }

        private global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes MapNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes(global::GraphQL.Client.State.CourseTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPaginatedCourses_PaginatedCourses_Nodes returnValue = default !;
            if (data.__typename.Equals("CourseType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPaginatedCourses_PaginatedCourses_Nodes_CourseType(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Subject ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes_Instructor(data.Instructor ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor MapNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes_Instructor(global::GraphQL.Client.State.InstructorTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPaginatedCourses_PaginatedCourses_Nodes_Instructor returnValue = default !;
            if (data.__typename.Equals("InstructorType", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPaginatedCourses_PaginatedCourses_Nodes_Instructor_InstructorType(data.Id ?? throw new global::System.ArgumentNullException(), data.FirstName, data.LastName, data.Salary ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQL.Client.IGetPaginatedCourses_PaginatedCourses_PageInfo MapNonNullableIGetPaginatedCourses_PaginatedCourses_PageInfo(global::GraphQL.Client.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPaginatedCourses_PaginatedCourses_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPaginatedCourses_PaginatedCourses_PageInfo_PageInfo(data.StartCursor, data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPaginatedCoursesResultInfo(global::GraphQL.Client.State.PaginatedCoursesConnectionData? paginatedCourses, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PaginatedCourses = paginatedCourses;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.PaginatedCoursesConnectionData? PaginatedCourses { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPaginatedCoursesResultInfo(PaginatedCourses, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.CourseCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CourseCreatedResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.ICourseCreatedResult);
        public CourseCreatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CourseCreatedResultInfo info)
            {
                return new CourseCreatedResult(MapNonNullableICourseCreated_CourseCreated(info.CourseCreated, snapshot));
            }

            throw new global::System.ArgumentException("CourseCreatedResultInfo expected.");
        }

        private global::GraphQL.Client.ICourseCreated_CourseCreated MapNonNullableICourseCreated_CourseCreated(global::GraphQL.Client.State.CourseResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICourseCreated_CourseCreated returnValue = default !;
            if (data.__typename.Equals("CourseResult", global::System.StringComparison.Ordinal))
            {
                returnValue = new CourseCreated_CourseCreated_CourseResult(data.Id ?? throw new global::System.ArgumentNullException(), data.Name, data.Subject ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CourseCreatedResultInfo(global::GraphQL.Client.State.CourseResultData courseCreated, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseCreated = courseCreated;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.CourseResultData CourseCreated { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CourseCreatedResultInfo(CourseCreated, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.CourseUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CourseUpdatedResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.ICourseUpdatedResult);
        public CourseUpdatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CourseUpdatedResultInfo info)
            {
                return new CourseUpdatedResult(MapNonNullableICourseUpdated_CourseUpdated(info.CourseUpdated, snapshot));
            }

            throw new global::System.ArgumentException("CourseUpdatedResultInfo expected.");
        }

        private global::GraphQL.Client.ICourseUpdated_CourseUpdated MapNonNullableICourseUpdated_CourseUpdated(global::GraphQL.Client.State.CourseResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICourseUpdated_CourseUpdated returnValue = default !;
            if (data.__typename.Equals("CourseResult", global::System.StringComparison.Ordinal))
            {
                returnValue = new CourseUpdated_CourseUpdated_CourseResult(data.Id ?? throw new global::System.ArgumentNullException(), data.Name, data.Subject ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CourseUpdatedResultInfo(global::GraphQL.Client.State.CourseResultData courseUpdated, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseUpdated = courseUpdated;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQL.Client.State.CourseResultData CourseUpdated { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CourseUpdatedResultInfo(CourseUpdated, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.SearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SearchResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQL.Client.ISearchResult);
        public SearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SearchResultInfo info)
            {
                return new SearchResult(MapNonNullableISearch_SearchNonNullableArray(info.Search, snapshot));
            }

            throw new global::System.ArgumentException("SearchResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.ISearch_Search> MapNonNullableISearch_SearchNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.ISearchResultUnionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var searchResultUnions = new global::System.Collections.Generic.List<global::GraphQL.Client.ISearch_Search>();
            foreach (global::GraphQL.Client.State.ISearchResultUnionData child in list)
            {
                searchResultUnions.Add(MapNonNullableISearch_Search(child, snapshot));
            }

            return searchResultUnions;
        }

        private global::GraphQL.Client.ISearch_Search MapNonNullableISearch_Search(global::GraphQL.Client.State.ISearchResultUnionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISearch_Search? returnValue;
            if (data is global::GraphQL.Client.State.CourseTypeData courseType)
            {
                if (!courseType.Id.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::GraphQL.Client.Search_Search_CourseType(courseType.__typename ?? throw new global::System.ArgumentNullException(), courseType.Id!.Value, courseType.Name ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::GraphQL.Client.State.InstructorTypeData instructorType)
            {
                if (!instructorType.Id.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!instructorType.Salary.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::GraphQL.Client.Search_Search_InstructorType(instructorType.__typename ?? throw new global::System.ArgumentNullException(), instructorType.Id!.Value, instructorType.FirstName, instructorType.LastName, instructorType.Salary!.Value);
            }
            else if (data is global::GraphQL.Client.State.StudentTypeData studentType)
            {
                returnValue = new global::GraphQL.Client.Search_Search_StudentType(studentType.__typename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SearchResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.ISearchResultUnionData> search, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Search = search;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.ISearchResultUnionData> Search { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SearchResultInfo(Search, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface ICourseTypeInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsSubjectSet { get; }

        global::System.Boolean IsInstructorIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface ICourseTypeFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsSubjectSet { get; }

        global::System.Boolean IsInstructorIdSet { get; }

        global::System.Boolean IsCreatorIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IComparableGuidOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IStringOperationFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsContainsSet { get; }

        global::System.Boolean IsNcontainsSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsStartsWithSet { get; }

        global::System.Boolean IsNstartsWithSet { get; }

        global::System.Boolean IsEndsWithSet { get; }

        global::System.Boolean IsNendsWithSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface ISubjectOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface ICourseTypeSortInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsSubjectSet { get; }

        global::System.Boolean IsCreatorIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICreateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICreateCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public CreateCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICreateCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateCourseResult Result, CreateCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateCourseResult, CreateCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateCourseResultInfo(DeserializeNonNullableICreateCourse_CreateCourse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createCourse")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.CourseResultData DeserializeNonNullableICreateCourse_CreateCourse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseResultData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IDeleteCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IDeleteCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IDeleteCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteCourseResult Result, DeleteCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteCourseResult, DeleteCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteCourseResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteCourse")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IUpdateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IUpdateCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IUpdateCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateCourseResult Result, UpdateCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateCourseResult, UpdateCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateCourseResultInfo(DeserializeNonNullableIUpdateCourse_UpdateCourse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateCourse")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.CourseResultData DeserializeNonNullableIUpdateCourse_UpdateCourse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseResultData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), subject: DeserializeNonNullableSubject(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subject")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.Subject DeserializeNonNullableSubject(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _subjectParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCourseByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCourseByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCourseByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetCourseByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCourseByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCourseByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCourseByIdResult Result, GetCourseByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCourseByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCourseByIdResult, GetCourseByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCourseByIdResultInfo(DeserializeNonNullableIGetCourseById_CourseById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.CourseTypeData DeserializeNonNullableIGetCourseById_CourseById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), instructor: DeserializeNonNullableIGetCourseById_CourseById_Instructor(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "instructor")), students: DeserializeIGetCourseById_CourseById_StudentsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "students")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.State.InstructorTypeData DeserializeNonNullableIGetCourseById_CourseById_Instructor(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("InstructorType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.InstructorTypeData(typename, firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.StudentTypeData>? DeserializeIGetCourseById_CourseById_StudentsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var studentTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.State.StudentTypeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                studentTypes.Add(DeserializeNonNullableIGetCourseById_CourseById_Students(child));
            }

            return studentTypes;
        }

        private global::GraphQL.Client.State.StudentTypeData DeserializeNonNullableIGetCourseById_CourseById_Students(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("StudentType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.StudentTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCoursesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCoursesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetCoursesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCoursesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCoursesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCoursesResult Result, GetCoursesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCoursesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCoursesResult, GetCoursesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCoursesResultInfo(DeserializeNonNullableIGetCourses_CoursesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courses")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData> DeserializeNonNullableIGetCourses_CoursesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var courseTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.State.CourseTypeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                courseTypes.Add(DeserializeNonNullableIGetCourses_Courses(child));
            }

            return courseTypes;
        }

        private global::GraphQL.Client.State.CourseTypeData DeserializeNonNullableIGetCourses_Courses(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), subject: DeserializeNonNullableSubject(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subject")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.Subject DeserializeNonNullableSubject(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _subjectParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPaginatedCoursesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetPaginatedCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetPaginatedCoursesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetPaginatedCoursesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetPaginatedCoursesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.SortEnumType>("SortEnumType") ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPaginatedCoursesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPaginatedCoursesResult Result, GetPaginatedCoursesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPaginatedCoursesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPaginatedCoursesResult, GetPaginatedCoursesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPaginatedCoursesResultInfo(DeserializeIGetPaginatedCourses_PaginatedCourses(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paginatedCourses")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.PaginatedCoursesConnectionData? DeserializeIGetPaginatedCourses_PaginatedCourses(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PaginatedCoursesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.PaginatedCoursesConnectionData(typename, nodes: DeserializeIGetPaginatedCourses_PaginatedCourses_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData>? DeserializeIGetPaginatedCourses_PaginatedCourses_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var courseTypes = new global::System.Collections.Generic.List<global::GraphQL.Client.State.CourseTypeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                courseTypes.Add(DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes(child));
            }

            return courseTypes;
        }

        private global::GraphQL.Client.State.CourseTypeData DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), subject: DeserializeNonNullableSubject(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subject")), instructor: DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes_Instructor(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "instructor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.Subject DeserializeNonNullableSubject(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _subjectParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.State.InstructorTypeData DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_Nodes_Instructor(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("InstructorType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.InstructorTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), salary: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "salary")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::GraphQL.Client.State.PageInfoData DeserializeNonNullableIGetPaginatedCourses_PaginatedCourses_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.PageInfoData(typename, startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseCreatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseCreatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CourseCreatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseCreatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICourseCreatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICourseCreatedResult Result, CourseCreatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICourseCreatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICourseCreatedResult, CourseCreatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CourseCreatedResultInfo(DeserializeNonNullableICourseCreated_CourseCreated(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseCreated")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.CourseResultData DeserializeNonNullableICourseCreated_CourseCreated(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseResultData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), subject: DeserializeNonNullableSubject(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subject")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.Subject DeserializeNonNullableSubject(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _subjectParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseUpdatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseUpdatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQL.Client.Subject> _subjectParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CourseUpdatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseUpdatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _subjectParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQL.Client.Subject>("Subject") ?? throw new global::System.ArgumentException("No serializer for type `Subject` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICourseUpdatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICourseUpdatedResult Result, CourseUpdatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICourseUpdatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICourseUpdatedResult, CourseUpdatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CourseUpdatedResultInfo(DeserializeNonNullableICourseUpdated_CourseUpdated(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseUpdated")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQL.Client.State.CourseResultData DeserializeNonNullableICourseUpdated_CourseUpdated(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseResultData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), subject: DeserializeNonNullableSubject(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subject")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQL.Client.Subject DeserializeNonNullableSubject(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _subjectParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ISearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ISearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public SearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ISearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<ISearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISearchResult Result, SearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISearchResult, SearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SearchResultInfo(DeserializeNonNullableISearchResultUnionDataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "search")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.ISearchResultUnionData> DeserializeNonNullableISearchResultUnionDataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var searchResultUnions = new global::System.Collections.Generic.List<global::GraphQL.Client.State.ISearchResultUnionData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                searchResultUnions.Add(DeserializeNonNullableISearchResultUnionData(child));
            }

            return searchResultUnions;
        }

        private global::GraphQL.Client.State.ISearchResultUnionData DeserializeNonNullableISearchResultUnionData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.CourseTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            if (typename?.Equals("InstructorType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.InstructorTypeData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), salary: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "salary")));
            }

            if (typename?.Equals("StudentType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQL.Client.State.StudentTypeData(typename);
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseResultData
    {
        public CourseResultData(global::System.String __typename, global::System.Guid? id = default !, global::System.String? name = default !, global::GraphQL.Client.Subject? subject = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
            Subject = subject;
        }

        public global::System.String __typename { get; }

        public global::System.Guid? Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.Subject? Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ISearchResultUnionData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CourseTypeData : ISearchResultUnionData
    {
        public CourseTypeData(global::System.String __typename, global::System.Guid? id = default !, global::System.String? name = default !, global::GraphQL.Client.State.InstructorTypeData? instructor = default !, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.StudentTypeData>? students = default !, global::GraphQL.Client.Subject? subject = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
            Instructor = instructor;
            Students = students;
            Subject = subject;
        }

        public global::System.String __typename { get; }

        public global::System.Guid? Id { get; }

        public global::System.String? Name { get; }

        public global::GraphQL.Client.State.InstructorTypeData? Instructor { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.StudentTypeData>? Students { get; }

        public global::GraphQL.Client.Subject? Subject { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class InstructorTypeData : ISearchResultUnionData
    {
        public InstructorTypeData(global::System.String __typename, global::System.String? firstName = default !, global::System.Guid? id = default !, global::System.String? lastName = default !, global::System.Double? salary = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            FirstName = firstName;
            Id = id;
            LastName = lastName;
            Salary = salary;
        }

        public global::System.String __typename { get; }

        public global::System.String? FirstName { get; }

        public global::System.Guid? Id { get; }

        public global::System.String? LastName { get; }

        public global::System.Double? Salary { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class StudentTypeData : ISearchResultUnionData
    {
        public StudentTypeData(global::System.String __typename, global::System.Guid? id = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
        }

        public global::System.String __typename { get; }

        public global::System.Guid? Id { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PaginatedCoursesConnectionData
    {
        public PaginatedCoursesConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData>? nodes = default !, global::GraphQL.Client.State.PageInfoData? pageInfo = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQL.Client.State.CourseTypeData>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::GraphQL.Client.State.PageInfoData? PageInfo { get; }

        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.String? startCursor = default !, global::System.String? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.String __typename { get; }

        ///<summary>When paginating backwards, the cursor to continue.</summary>
        public global::System.String? StartCursor { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more edges exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public static partial class GraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GraphQL.Client.State.GraphQLClientStoreAccessor> AddGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GraphQL.Client.State.GraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CreateCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.DeleteCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.UpdateCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetCourseByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetCoursesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetPaginatedCoursesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CourseCreatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CourseUpdatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.SearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GraphQL.Client.State.GraphQLClientStoreAccessor>("GraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("GraphQLClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.SubjectSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.SortEnumTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.CourseTypeInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.CourseTypeFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.ComparableGuidOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.StringOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.SubjectOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQL.Client.CourseTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICreateCourseResult>, global::GraphQL.Client.State.CreateCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICreateCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.ICreateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICreateCourseResult>, global::GraphQL.Client.State.CreateCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.ICreateCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICreateCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICreateCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.CreateCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.ICreateCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CreateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IDeleteCourseResult>, global::GraphQL.Client.State.DeleteCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IDeleteCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IDeleteCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IDeleteCourseResult>, global::GraphQL.Client.State.DeleteCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.IDeleteCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IDeleteCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IDeleteCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.DeleteCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IDeleteCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.DeleteCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IUpdateCourseResult>, global::GraphQL.Client.State.UpdateCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IUpdateCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IUpdateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IUpdateCourseResult>, global::GraphQL.Client.State.UpdateCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.IUpdateCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IUpdateCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IUpdateCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.UpdateCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IUpdateCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.UpdateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCourseByIdResult>, global::GraphQL.Client.State.GetCourseByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCourseByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IGetCourseByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCourseByIdResult>, global::GraphQL.Client.State.GetCourseByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.IGetCourseByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCourseByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCourseByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.GetCourseByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IGetCourseByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetCourseByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCoursesResult>, global::GraphQL.Client.State.GetCoursesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetCoursesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IGetCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCoursesResult>, global::GraphQL.Client.State.GetCoursesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.IGetCoursesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCoursesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetCoursesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.GetCoursesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IGetCoursesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetPaginatedCoursesResult>, global::GraphQL.Client.State.GetPaginatedCoursesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.IGetPaginatedCoursesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.IGetPaginatedCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetPaginatedCoursesResult>, global::GraphQL.Client.State.GetPaginatedCoursesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.IGetPaginatedCoursesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetPaginatedCoursesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.IGetPaginatedCoursesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.GetPaginatedCoursesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IGetPaginatedCoursesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GetPaginatedCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseCreatedResult>, global::GraphQL.Client.State.CourseCreatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseCreatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.ICourseCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseCreatedResult>, global::GraphQL.Client.State.CourseCreatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.ICourseCreatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseCreatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseCreatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.CourseCreatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.ICourseCreatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CourseCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseUpdatedResult>, global::GraphQL.Client.State.CourseUpdatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ICourseUpdatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.ICourseUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseUpdatedResult>, global::GraphQL.Client.State.CourseUpdatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.ICourseUpdatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseUpdatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ICourseUpdatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.CourseUpdatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.ICourseUpdatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.CourseUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ISearchResult>, global::GraphQL.Client.State.SearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQL.Client.ISearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.ISearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ISearchResult>, global::GraphQL.Client.State.SearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQL.Client.ISearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ISearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQL.Client.ISearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.SearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.ISearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.SearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GraphQL.Client.State.GraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.GraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQL.Client.IGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQL.Client.GraphQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
